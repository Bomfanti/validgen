package validgen

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"text/template"
)

var structValidatorTpl = `// Code generated by ValidGen. DO NOT EDIT.

package {{.PackageName}}

import (
	"github.com/opencodeco/validgen/types"
)

func {{.Name}}Validate(obj *{{.Name}}) []error {
	var errs []error
{{range .FieldsInfo}}{{condition .Name .Type .Validations}}{{end}}
	return errs
}
`

type StructInfo struct {
	Name           string
	Path           string
	PackageName    string
	FieldsInfo     []FieldInfo
	HasValidateTag bool
}

type FieldInfo struct {
	Name        string
	Type        string
	Tag         string
	Validations []string
}

func (fv *StructInfo) GenerateValidator() (string, error) {
	funcMap := template.FuncMap{
		"condition": condition,
	}

	tmpl, err := template.New("FileValidator").Funcs(funcMap).Parse(structValidatorTpl)
	if err != nil {
		return "", err
	}

	code := new(bytes.Buffer)
	if err := tmpl.Execute(code, fv); err != nil {
		return "", err
	}

	return code.String(), nil
}

func condition(fieldName, fieldType string, fieldValidations []string) (string, error) {

	tests := ""
	for _, fieldValidation := range fieldValidations {
		testCode, err := IfCode(fieldName, fieldValidation, fieldType)
		if err != nil {
			return "", err
		}

		tests += testCode
	}

	return tests, nil
}

func IfCode(fieldName, fieldValidation, fieldType string) (string, error) {
	testElements, err := GetTestElements(fieldName, fieldValidation, fieldType)
	if err != nil {
		return "", fmt.Errorf("field %s: %w", fieldName, err)
	}

	return fmt.Sprintf(
		`
	if !(%s %s %s) {
		errs = append(errs, types.NewValidationError("%s"))
	}
`, testElements.loperand, testElements.operator, testElements.roperand, testElements.errorMessage), nil
}

func (s *StructInfo) GenerateFileValidator() error {
	fmt.Printf("Generating struct %s validations code\n", s.Name)

	code, err := s.GenerateValidator()
	if err != nil {
		return err
	}

	if err := os.WriteFile(s.Path+"/"+strings.ToLower(s.Name)+"_validator.go", []byte(code), 0644); err != nil {
		return err
	}

	return nil
}

func (s *StructInfo) PrintInfo() {
	fmt.Println("Struct:", s.Name)
	fmt.Println("\tHasValidateTag:", s.HasValidateTag)

	for _, f := range s.FieldsInfo {
		fmt.Println("\tField:", f.Name, f.Type, f.Tag)
	}
}
